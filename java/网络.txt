网络
	网络已经不再是简单的通信工具。
	
	Sun提出了概念： 网络就是计算机。
	
	今天：移动互联网，所有手机、移动终端、PC都可以通过有线、无线的方式接入互联网。
	
	物联网：家庭所有电器，都有操作系统，都需要接入互联网。
	
	网络分层：
	
	TCP/IP 的网络分层模型
	
	应用层				：HTTP协议、FTP、SNTP、POP3。。。
	
	传输层				：TCP协议
	
	网络层				：IP协议
	
	物理层+数据链路层	：传输最底层二进制流
	
	TCP/IP协议 - 一起被设计出来，于是经常有人把它们放在一起提。
	
IP地址与端口

	IP地址：就是为网络上的每个物理节点（广义的）分配一个"门牌号"。
			通过IP地址，可以保证网络上的数据包能正确地找到每个物理节点。
			
	IPV4:32位的地址。2^32 = 4G个地址。
	
	IPv6：128位的地址。2^128个地址。
	
	IP地址：相当于一个门牌号。
			IP地址保证网络上的数据包能正确地找到对应的物理节点，但每个物理节点上可能有多个应用程序在同时对外服务。
			
	端口：每个应用在网络上通信时，占用一个端口。
		  端口相当于房间号。
		  端口保证到了物理节点的数据包能正确地找到对应的应用程序。
		  
	端口的约定：（0~65535个端口）
		0~1023 ： 公用端口。80（HTTP）,21（FTP）,110（POP3）。。。
		1024~49151：应用程序端口。MySQL：3306；Oracle：1521
		49152~65535：动态分配端口。
		
InetAddress - 代表标准的IP地址，它不带端口。
			
	如果你想获取关于该IP地址的一些相关属性，即可通过该类提供方法进行判断。	
	InetAddress 工具类：代表一个IP地址，它有两个子类，一个子类掉膘IPv4地址，一个子类代表IPv6的地址
	
			InetAddress
		  	|		  |
	Inet4Address	Inet6Address
	
	InetSocketAddress : 它代表了[IP:port].
	
两个工具类：URLDecoder与URLEncoder

	URLEncoder ： 可以把"非西欧文字"编码成%B7%E8%BF%F1的形式。
		-- 在有些场景，无法传输和存储"非西欧文字"，此时就需要用到URLEncoder。
		典型的像Cookie，Cookie的值就不能是中文。
		
	URLDecoder ： 可以把%B7%E8%BF%F1的形式的字符串解码成"非西欧文字"。

URL ：代表一个网络地址。

	URLConnection ：代表与网络地址的连接
		|
	HttpURLConnection ：基于HTTP协议的网络连接
	
TCP通信：
	Socket - 相当于"虚拟链路"两端的插座。
			 Socket负责完成通信。
			 
	ServerSocket - 它只负责"接受"连接。
				   它用于产生Socket。
				   
	服务器端编程：
		（1）创建ServerSocket对象，该对象负责"接收"连接。
		（2）如果客户端有链接，accept方法将会返回一个Socket
		（3）通过IO流读取对方的信息，也可向对方发送数据。
		
	客户端编程：
		（1）new Socket()来建立与远程服务器的连接。
		（2）通过IO流读取对方的信息，也可向对方发送数据。
	
	
	